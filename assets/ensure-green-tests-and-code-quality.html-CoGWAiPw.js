import{_ as e,c as t,o as r,a as n}from"./app-BifzaXg7.js";const i={},a=n('<h1 id="ensure-green-tests-and-code-quality" tabindex="-1"><a class="header-anchor" href="#ensure-green-tests-and-code-quality"><span>Ensure Green Tests and Code Quality</span></a></h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h2><p>We want to enforce that new code does not break existing tests and complies to our formatting rules. To do this we need Continuous Integration (CI). In detail, we want to create a pipeline which automatically validates our tests and code.</p><h2 id="instructions" tabindex="-1"><a class="header-anchor" href="#instructions"><span>Instructions</span></a></h2><ul><li>Create a new GitHub Action Workflow that gets triggered on Push<br><em>Be aware that the <code>main</code> branch would normally be protected and changes can only be made through Pull-Requests. In this case the trigger should be Pull-Request. Unfortunately, the GitHub free account does not allow branch protection.</em></li><li><a href="https://github.com/actions/checkout" target="_blank" rel="noopener noreferrer">Checkout</a> the code.</li><li>Chose one of the ACs and try to create the workflow for it. You may use GitHub’s workflow templates during creation.</li><li>Validate both cases: Passing and Failing. <ul><li>e.g.: Push changes which violate EsLint rules (e.g. <code>const bla;</code> → const declaration without assignment) and check if Pipeline fails.</li></ul></li><li>Continue with the other ACs.</li><li><strong>Tipp:</strong> ChatGPT is pretty good in creating simple Workflows.</li></ul><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h2><ul><li><a href="https://klosebrothers.atlassian.net/wiki/spaces/KB/pages/2328494120" target="_blank" rel="noopener noreferrer">Frontend Testing with Cypress</a></li></ul><h2 id="acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#acceptance-criteria"><span>Acceptance Criteria</span></a></h2><ul><li><p>#AC1: GitHub Actions Workflow exists and gets triggered on every push to the <code>main</code> branch</p></li><li><p>#AC2: Workflow executes all Cypress tests</p></li><li><p>#AC3: Workflow checks EsLint rules</p></li><li><p>#AC4: Workflow checks Prettier formatting</p></li></ul><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources"><span>Resources</span></a></h2><ul><li><a href="https://aws.amazon.com/devops/continuous-integration" target="_blank" rel="noopener noreferrer">What is Continuous Integration?</a></li></ul><ul><li><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions" target="_blank" rel="noopener noreferrer">Understanding GitHub Actions - GitHub Docs</a></li></ul><ul><li>Check Formatting:<a href="https://prettier.io/docs/en/cli.html#--check" target="_blank" rel="noopener noreferrer"></a><a href="https://prettier.io/docs/en/cli.html#--check" target="_blank" rel="noopener noreferrer">CLI · Prettier</a></li></ul>',13),s=[a];function o(l,c){return r(),t("div",null,s)}const u=e(i,[["render",o],["__file","ensure-green-tests-and-code-quality.html.vue"]]),d=JSON.parse('{"path":"/legacy/modules/todo-app/ensure-green-tests-and-code-quality.html","title":"Ensure Green Tests and Code Quality","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Description","slug":"description","link":"#description","children":[]},{"level":2,"title":"Instructions","slug":"instructions","link":"#instructions","children":[]},{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Acceptance Criteria","slug":"acceptance-criteria","link":"#acceptance-criteria","children":[]},{"level":2,"title":"Resources","slug":"resources","link":"#resources","children":[]}],"git":{"updatedTime":1728059686000,"contributors":[{"name":"miracoly","email":"68049792+miracoly@users.noreply.github.com","commits":1}]},"filePathRelative":"legacy/modules/todo-app/ensure-green-tests-and-code-quality.md"}');export{u as comp,d as data};
