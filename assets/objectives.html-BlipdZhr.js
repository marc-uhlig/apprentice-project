import{_ as e,c as i,o as l,a as o}from"./app-BWCoXAYE.js";const t={},n=o('<h1 id="objectives" tabindex="-1"><a class="header-anchor" href="#objectives"><span>Objectives</span></a></h1><h2 id="languages" tabindex="-1"><a class="header-anchor" href="#languages"><span>Languages</span></a></h2><h3 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h3><ul><li>Streams</li><li>Records</li><li>Optional&#39;s</li><li>Generics</li><li>Function Interfaces <ul><li><code>Function</code>, <code>BiFunction</code>, <code>Consumer</code>, <code>Supplier</code></li></ul></li></ul><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>Typescript</span></a></h3><ul><li><code>keyof</code>, <code>typeof</code></li><li><code>Partial</code>, <code>Required</code>, <code>Readonly</code>, <code>Record</code>, <code>Omit</code>, <code>Exclude</code>, <code>ReturnType</code></li></ul><h3 id="sql" tabindex="-1"><a class="header-anchor" href="#sql"><span><strong>SQL</strong></span></a></h3><ul><li>Know existence of different dialects</li><li>Query data with <code>SELECT</code>, <code>FROM</code>, <code>ORDER BY</code>, <code>DESC</code>, <code>ASC</code>, <code>LIMIT</code>, <code>DISTINCT</code></li><li>Filter Data <ul><li>with <code>WHERE</code>, <code>IN</code>, <code>LIKE</code>, <code>AND</code>, <code>NOT LIKE</code></li><li>filter on multiple columns</li><li>on missing data with <code>IS NULL</code> / <code>IS NOT NULL</code></li></ul></li><li>Aggregating Data with <code>SUM</code>, <code>AVG</code>, <code>MAX</code>, <code>MIN</code></li><li>Join Tables with <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, <code>FULL JOIN</code></li></ul><h2 id="frameworks-libraries" tabindex="-1"><a class="header-anchor" href="#frameworks-libraries"><span>Frameworks / Libraries</span></a></h2><h3 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span><strong>Spring Boot</strong></span></a></h3><ul><li>Spring Framework <ul><li>Core <ul><li>Use <code>@Component</code>, <code>@Bean</code> &amp; <code>@Service</code></li><li>Understand <code>@Autowired</code></li><li>Null-safety with <code>@Nullable</code> &amp; <code>@NonNull</code></li><li>Logging with Spring</li><li>Mock Beans with <code>@MockBean</code></li></ul></li><li>Web MVC <ul><li>Create Controller Endpoint</li><li>Return different Status Codes</li><li>Test Endpoints with MockMVC</li></ul></li></ul></li><li>Spring Data <ul><li>Create Entity</li><li>Create OneToMany Relation</li><li>Cascade Deletion for OneToMany</li><li>Create Repository</li><li>Create JPA interface function</li><li>Create custom query</li><li>Create Repository Test</li></ul></li></ul><h3 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3"><span><strong>Vue3</strong></span></a></h3><ul><li>Composition API</li><li>Use Typescript with Vue</li><li>Understand Reactivity</li><li><code>ref</code></li><li><code>computed</code></li><li>Pass Props</li><li>Conditional classes &amp; styles</li><li>Event handling</li><li>Use &amp; design Slots</li><li>Fetch data</li><li>Use Composables</li><li>Routing with <code>vue-router</code></li><li>Create pages</li><li>Use <code>&lt;RouterLink&gt;</code></li><li>Use <code>&lt;RouterView&gt;</code> slot</li><li>Browser Plugin <code>Vue DevTools</code></li></ul><h3 id="mockito" tabindex="-1"><a class="header-anchor" href="#mockito"><span><strong>Mockito</strong></span></a></h3><ul><li>Mock services with <code>Mockito.when</code></li><li>Verify interaction with <code>Mockito.verify</code></li></ul><h3 id="junit" tabindex="-1"><a class="header-anchor" href="#junit"><span><strong>JUnit</strong></span></a></h3><ul><li><code>@Test</code>, <code>@ParameterizedTest</code>, <code>@RepeatedTest</code>, <code>@Disabled</code></li><li><code>@DisplayName</code>, <code>@DisplayNameGeneration</code></li><li><code>@BeforeEach</code>, <code>@AfterEach</code>, <code>@BeforeAll</code>, <code>@AfterAll</code></li></ul><h3 id="assertj" tabindex="-1"><a class="header-anchor" href="#assertj"><span><strong>AssertJ</strong></span></a></h3><ul><li>Common Assertions on type</li><li>Collection Assertions</li><li>Assertions on Exceptions</li></ul><h2 id="tools" tabindex="-1"><a class="header-anchor" href="#tools"><span>Tools</span></a></h2><h3 id="insomnia" tabindex="-1"><a class="header-anchor" href="#insomnia"><span><strong>Insomnia</strong></span></a></h3><ul><li>Create Requests</li><li>Send Request Body</li><li>Use Query Params</li><li>Use Path Variables</li><li>Use Environments</li></ul><h3 id="chrome" tabindex="-1"><a class="header-anchor" href="#chrome"><span><strong>Chrome</strong></span></a></h3><ul><li>AdBlock</li><li>DarkReader</li><li>Vimium</li><li>JSONVue</li></ul><h3 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span><strong>Git</strong></span></a></h3><ul><li>set commit username &amp; email</li><li>initialize or clone repository</li><li>stage changes with <code>git</code> [ <code>status</code>, <code>add</code>, <code>reset</code>, <code>diff</code>, <code>commit</code> ]</li><li>branches: create, checkout &amp; merge branches</li><li>share &amp; update with <code>git</code> [ <code>remote add</code>, <code>fetch</code>, <code>push</code>, <code>pull</code> ]</li><li>fundamentals of <code>git rebase</code></li><li>IntelliJ’s git shelve</li></ul><h3 id="intellij" tabindex="-1"><a class="header-anchor" href="#intellij"><span><strong>IntelliJ</strong></span></a></h3><ul><li>Shortcuts</li><li>Settings &amp; Plugin Sync</li><li>Plugins <ul><li>CheckStyle-IDEA</li><li>Key Promoter X</li><li>Presentation Assistant</li><li>Sonarlint</li><li>String Manipulation</li><li>AsciiDoc</li></ul></li></ul><h3 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span><strong>Maven</strong></span></a></h3><ul><li>Lifecycles</li><li>Add dependencies</li><li>IntelliJ Maven Tool Window</li></ul><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm"><span><strong>NPM</strong></span></a></h3><ul><li>Add package</li><li>Add custom script</li></ul><h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span><strong>Docker</strong></span></a></h3><ul><li>Image <ul><li>build with tag</li><li>list all images</li><li>remove single image and all unused images</li></ul></li><li>Container <ul><li>run container from image with custom name</li><li>publish port to the host</li><li>run container in background</li><li>start / stop container</li><li>remove stopped container</li><li>open shell inside container</li><li>show logs of container</li><li>list running / all containers</li></ul></li><li>Dockerfile <ul><li><code>FROM</code>, <code>ENV</code>, <code>RUN</code>,</li><li><code>WORKDIR</code>, <code>COPY</code>, <code>ADD</code></li><li><code>CMD</code>, <code>ENTRYPOINT</code></li></ul></li></ul><h3 id="github-actions" tabindex="-1"><a class="header-anchor" href="#github-actions"><span><strong>GitHub Actions</strong></span></a></h3><ul><li>TODO</li></ul><h3 id="command-line" tabindex="-1"><a class="header-anchor" href="#command-line"><span><strong>Command Line</strong></span></a></h3><h2 id="methodology" tabindex="-1"><a class="header-anchor" href="#methodology"><span>Methodology</span></a></h2><h3 id="coding" tabindex="-1"><a class="header-anchor" href="#coding"><span><strong>Coding</strong></span></a></h3><ul><li>Pair Programming <ul><li>Driver / Navigator</li><li>Constraints</li></ul></li><li>Mob Programming</li><li>Time Management with Pomodoro</li></ul><h3 id="scrum-roles" tabindex="-1"><a class="header-anchor" href="#scrum-roles"><span><strong>Scrum Roles</strong></span></a></h3><ul><li>Developer</li><li>Product Owner</li><li>Scrum Master</li></ul><h3 id="scrum-meetings" tabindex="-1"><a class="header-anchor" href="#scrum-meetings"><span><strong>Scrum Meetings</strong></span></a></h3><ul><li>**Daily **- in 1 minute say: <ul><li><strong>what have I</strong> done recently?</li><li><strong>what will I</strong> work on today?</li><li>**what is preventing **me from working?</li></ul></li><li><strong>Review</strong> - how do I present the achievements of the last sprint? <br> Focus on results/”done” stories, and the created customer value. <br> Talk about the solutions you delivered, not problems you encountered!</li><li><strong>Planning</strong> - estimate what we can achieve in the next sprint? <br> What is realistic, what not?</li><li>**Retro **- adapt for the next sprint <ul><li>moderate one retro in v-team <br> Consider the different phases to activate the participants, collect insights and define action steps</li><li>participate in retros: <br> Talk about things that reduced your productivity or satisfaction, talk about what bothers you, and what should be different in the future. <br> Goal: **Define action steps **for all or some team members for the next sprint. <br> NOT the goal: Vent (or rant) about a topic.</li></ul></li></ul><h3 id="work-ethics" tabindex="-1"><a class="header-anchor" href="#work-ethics"><span><strong>Work ethics</strong></span></a></h3><ul><li><strong>Think in solutions, not problems</strong><ul><li>When faced with a difficult situation (technical, structural, personal,...) think about what you can do. <br> Collect possible solutions, discuss them, choose one and implement it.</li><li>If someone drifts into complaining about things that do not go well, remind that person that things won&#39;t change if you just complain about it (Note that this is a &quot;problem thinking&quot; sentence! Complaining about someone who is complaining does not solve anything!)</li><li>Instead: <br> If someone drifts into complaining about things that do not go well, remind that person that things will (only) change, if you adapt and approach the current task/situation differently. (This is &quot;solution thinking&quot;. It might help the complaining person to step into solution-mode)</li></ul></li><li>**Always be polite and honest <br> **But also don&#39;t be too polite (and let everything be done to you). <ul><li>If something is going wrong or someone is acting in a bad or destructive way, communicate your perception. Do not close your eyes to something and suffer in silence.</li><li>Consider using the retro to talk about &quot;bigger topics&quot;, and keep in mind to not take everything personal or too serious.</li></ul></li><li>**Transparency <br> **Your PO or other team members will highly appreciate if you tell them a task will take unexpectedly longer - instead of hiding it until a lot of time has passed.</li><li><strong>Activity</strong><ul><li>Don&#39;t just sit and listen in meetings. Be part of the active discussion.</li><li>OR: Ask politely if you may leave/skip the meeting if you think your time could be used more wisely. Usually, no one will force you to attend a meeting if your attentance has no benefit for the customer.</li></ul></li></ul><h2 id="certifications" tabindex="-1"><a class="header-anchor" href="#certifications"><span>Certifications</span></a></h2><ul><li>CSM: Certified Scrum Master</li><li>CSD: Certified Scrum Developer</li></ul>',48),a=[n];function s(r,c){return l(),i("div",null,a)}const h=e(t,[["render",s],["__file","objectives.html.vue"]]),u=JSON.parse('{"path":"/legacy/objectives.html","title":"Objectives","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Languages","slug":"languages","link":"#languages","children":[{"level":3,"title":"Java","slug":"java","link":"#java","children":[]},{"level":3,"title":"Typescript","slug":"typescript","link":"#typescript","children":[]},{"level":3,"title":"SQL","slug":"sql","link":"#sql","children":[]}]},{"level":2,"title":"Frameworks / Libraries","slug":"frameworks-libraries","link":"#frameworks-libraries","children":[{"level":3,"title":"Spring Boot","slug":"spring-boot","link":"#spring-boot","children":[]},{"level":3,"title":"Vue3","slug":"vue3","link":"#vue3","children":[]},{"level":3,"title":"Mockito","slug":"mockito","link":"#mockito","children":[]},{"level":3,"title":"JUnit","slug":"junit","link":"#junit","children":[]},{"level":3,"title":"AssertJ","slug":"assertj","link":"#assertj","children":[]}]},{"level":2,"title":"Tools","slug":"tools","link":"#tools","children":[{"level":3,"title":"Insomnia","slug":"insomnia","link":"#insomnia","children":[]},{"level":3,"title":"Chrome","slug":"chrome","link":"#chrome","children":[]},{"level":3,"title":"Git","slug":"git","link":"#git","children":[]},{"level":3,"title":"IntelliJ","slug":"intellij","link":"#intellij","children":[]},{"level":3,"title":"Maven","slug":"maven","link":"#maven","children":[]},{"level":3,"title":"NPM","slug":"npm","link":"#npm","children":[]},{"level":3,"title":"Docker","slug":"docker","link":"#docker","children":[]},{"level":3,"title":"GitHub Actions","slug":"github-actions","link":"#github-actions","children":[]},{"level":3,"title":"Command Line","slug":"command-line","link":"#command-line","children":[]}]},{"level":2,"title":"Methodology","slug":"methodology","link":"#methodology","children":[{"level":3,"title":"Coding","slug":"coding","link":"#coding","children":[]},{"level":3,"title":"Scrum Roles","slug":"scrum-roles","link":"#scrum-roles","children":[]},{"level":3,"title":"Scrum Meetings","slug":"scrum-meetings","link":"#scrum-meetings","children":[]},{"level":3,"title":"Work ethics","slug":"work-ethics","link":"#work-ethics","children":[]}]},{"level":2,"title":"Certifications","slug":"certifications","link":"#certifications","children":[]}],"git":{"updatedTime":1728059686000,"contributors":[{"name":"miracoly","email":"68049792+miracoly@users.noreply.github.com","commits":1}]},"filePathRelative":"legacy/objectives.md"}');export{h as comp,u as data};
