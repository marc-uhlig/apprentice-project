import{_ as o,r,c as i,b as e,e as n,w as s,a as t,o as l,d as c}from"./app-CefRtAWZ.js";const d={},h=t('<h1 id="persist-data-with-in-memory-database" tabindex="-1"><a class="header-anchor" href="#persist-data-with-in-memory-database"><span>Persist Data with In-Memory Database</span></a></h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h2><p>Currently, all tasks added to the Backend via the Frontend are removed after restart. For production, we need to persist this data with a database. A first step to close the gap between our current implementation and production is to use an in-memory database. We will use <a href="https://www.h2database.com/html/main.html" target="_blank" rel="noopener noreferrer">H2</a> for that purpose.</p><h2 id="instructions" tabindex="-1"><a class="header-anchor" href="#instructions"><span>Instructions</span></a></h2><ul><li>Add following maven dependencies: <ul><li>H2 Database</li><li>Spring Boot Starter Data JPA</li></ul></li><li>Create a new Spring profile in <code>src/main/resources</code> and call it <code>application-dev.properties</code>. <ul><li>Enable the H2 console.</li><li>Add necessary entries for JPA and H2 to work.</li><li>Add the newly created <code>dev</code> profile to your IntelliJ run configuration under.</li></ul></li><li>Create a new Entity class for your Task named <code>TaskEntity</code> and define necessary fields.</li><li>Use Lombok to avoid Boilerplate code.</li><li>Create a JPA Repository for your Entity and call it <code>TaskRepository</code>.</li><li>Create a Service class and call it <code>TaskService</code> .</li><li>Adapt your Controller endpoints to use the database. <ul><li>Your endpoint, only calls a method of the Service.</li><li>The Service calls the Repository to interact with the database. It yields <code>TaskEntity</code> objects.</li><li>If the endpoint shall return a response body, create a POJO called <code>Task</code> out of your TaskEntity inside your Service. It should be immutable. Return this object to the Controller.</li><li>Create a DTO object out of your <code>Task</code> object called <code>TaskDto</code> inside your Controller. It should be immutable. Return it to generate a response body.</li></ul></li><li>This segmentation is obviously overkill for our app, but the whole purpose of creating the ToDo-App is learning. The advantage of this separation is flexibility <em>(with the cost of additional abstraction)</em>.</li><li>Start your app and test it manually. Validate the changes of your database with the h2-console under <code>http://localhost:8080/h2-console</code>.</li></ul><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h2>',6),p=t('<h2 id="acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#acceptance-criteria"><span>Acceptance Criteria</span></a></h2><ul><li>#AC1: Backend persists data with In-Memory database</li></ul><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources"><span>Resources</span></a></h2><ul><li><a href="https://www.baeldung.com/spring-boot-h2-database" target="_blank" rel="noopener noreferrer">Spring Boot With H2 Database | Baeldung</a></li><li><a href="https://www.baeldung.com/intro-to-project-lombok#bd-constructors" target="_blank" rel="noopener noreferrer">Introduction to Project Lombok | Baeldung</a></li><li><a href="https://www.baeldung.com/java-dto-pattern" target="_blank" rel="noopener noreferrer">DTO Pattern</a></li><li><a href="https://www.baeldung.com/java-record-keyword" target="_blank" rel="noopener noreferrer">Java Record Keyword | Baeldung</a></li></ul>',4);function u(m,b){const a=r("RouteLink");return l(),i("div",null,[h,e("ul",null,[e("li",null,[n(a,{to:"/legacy/modules/todo-app/connect-frontend-with-backend.html"},{default:s(()=>[c("Connect Frontend with Backend")]),_:1})])]),p])}const y=o(d,[["render",u],["__file","persist-data-with-in-memory-database.html.vue"]]),w=JSON.parse('{"path":"/legacy/modules/todo-app/persist-data-with-in-memory-database.html","title":"Persist Data with In-Memory Database","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Description","slug":"description","link":"#description","children":[]},{"level":2,"title":"Instructions","slug":"instructions","link":"#instructions","children":[]},{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Acceptance Criteria","slug":"acceptance-criteria","link":"#acceptance-criteria","children":[]},{"level":2,"title":"Resources","slug":"resources","link":"#resources","children":[]}],"git":{"updatedTime":1728059686000,"contributors":[{"name":"miracoly","email":"68049792+miracoly@users.noreply.github.com","commits":1}]},"filePathRelative":"legacy/modules/todo-app/persist-data-with-in-memory-database.md"}');export{y as comp,w as data};
